The game is composed of 2 stacks named a and b.
• To start with:

◦ a contains a random number of either positive or negative numbers without
any duplicates.
◦ b is empty

• The goal is to sort in ascending order numbers into stack a.

• To do this you have the following operations at your disposal:
sa : swap a - swap the first 2 elements at the top of stack a. Do nothing if there
is only one or no elements).

sb : swap b - swap the first 2 elements at the top of stack b. Do nothing if there
is only one or no elements).

ss : sa and sb at the same time.

pa : push a - take the first element at the top of b and put it at the top of a. Do
nothing if b is empty.

pb : push b - take the first element at the top of a and put it at the top of b. Do
nothing if a is empty.

ra : rotate a - shift up all elements of stack a by 1. The first element becomes
the last one.

rb : rotate b - shift up all elements of stack b by 1. The first element becomes
the last one.

rr : ra and rb at the same time.

rra : reverse rotate a - shift down all elements of stack a by 1. The last element
becomes the first one.

rrb : reverse rotate b - shift down all elements of stack b by 1. The last element
becomes the first one.

rrr : rra and rrb at the same time.

General Instructions:
write
read
malloc
free
exit

* no leaks
* norm
* without global variables
* program must not quit in an unexpected manner (Segmentation fault, bus error, double free, etc).
* libft including its own Makefile
* Makefile must contain the usual rules. It can only recompile the program if necessary.

FOR PUSH_SWAP:
https://medium.com/@jamierobertdawson/push-swap-the-least-amount-of-moves-with-two-stacks-d1e76a71789a - good article


for ft-ls:
10.1.6 форматирование временных меток файлов
По умолчанию временные метки файлов отображаются в сокращенном виде с использованием даты например, "Mar 30 2002" для несвоевременных меток времени и date-without-year и время, как "Mar 30 23:45" для недавних меток времени. Этот формат может изменение в зависимости от текущего locale, как описано ниже.

А timestamp считается "recent", если он меньше шести несколько месяцев назад, и не датируется в будущем. Если timestamp от Сегодня не перечислен в недавней форме, timestamp находится в будущем, которое означает, что у вас, вероятно, есть проблемы с перекосом часов, которые могут нарушить программы например, 'make', которые полагаются на временные метки файлов.

08.11.20
1. Валидация: 
	* аргументов не меньше 1, иначе "Error";
	* проверка, чтобы все были цифры, а не чары, parse if arguments are bigger than an integer - MIN, MAX;
	* сохраняем список и размер полученного листа;
	* проверка на дубликаты - кидаем все в интовый массив, сортируем и сравниваем;
	* если прошел все проверки, кладем все в stack a - первый аргумент должен быть на вершине stack'a;
	* иначе - все чистим;
	* сделать Makefile;

09.11.20
2. Сортировка:
	* https://medium.com/@jamierobertdawson/push-swap-the-least-amount-of-moves-with-two-stacks-d1e76a71789a - good article
	* используем для 3 и для 5 - один алгоритм;
	* расписать все операции - sa, sb, ss, etc.
	* для 100, 500 - используем chunk'и;

	* проверить в валидации при размере 0, где выходит;
	* приходится идти со 2 элемента, иначае потеряем начало листов, выходит aborted;

10.11.20
2. Сортировка:
	* 100-500 - сортировка;
	* чанк а - для сортировки а;
	* чанк б - для первичной сортировки б;

12.11.20
2. Сортировка:
	* защитить push, переделать make_moves_a;
	* переделать для сортировки в б чанке относительно средней - ra или sa;
	* is_sorted - написать;
	* 500 / 11 = 45;
	* 1 chunk - 45; //455
	* 2 chunk - 45; //410
	* 3 - 45; //365
	* 4 - 45; //320
	* 5 - 45; //320-45=275
	* 6 - 45; //230
	* 7 - 46; //184
	* 8 - 46; //138
	* 9 - 46; //92
	* 10 - 46; //46
	* 11 - 46; //0
	* sorted_chunk - может пойти с ласт???
3. Чекер:

11.11.20
4. Правки: